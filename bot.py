import discord
import os
import json
import random 
from discord import app_commands, ui
from dotenv import load_dotenv
import google.generativeai as genai
from datetime import datetime
import zoneinfo

def load_json_data(filepath):
    if not os.path.exists(filepath):
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

def save_json_data(filepath, data):
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

load_dotenv()

config = load_json_data('config.json')
ANON_USERS_FILE = config.get('ANON_USERS_FILE', 'anonymous_users.json')

PREDEFINED_COLORS = [
    0x3498db, 0x2ecc71, 0xf1c40f, 0xe91e63, 0x9b59b6,
    0x1abc9c, 0xf39c12, 0x34495e, 0xad1457, 0x607d8b
]

anon_users_data = load_json_data(ANON_USERS_FILE)

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    print("Loi: Vui long them GEMINI_API_KEY vao file .env.")
    exit()

genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-2.5-flash')

def load_counter(path):
    try:
        with open(path, 'r', encoding='utf-8') as f: return int(f.read())
    except (FileNotFoundError, ValueError):
        with open(path, 'w', encoding='utf-8') as f: f.write('1')
        return 1

def save_counter(path, value):
    with open(path, 'w', encoding='utf-8') as f: f.write(str(value))

def get_anonymous_identity(user_id_str: str, thread_data: dict):
    if user_id_str == str(thread_data["op_user_id"]):
        return "Ch·ªß th·ªõt (OP)", discord.Color.gold()
    
    if user_id_str in thread_data["users"]:
        user_data = thread_data["users"][user_id_str]
        return user_data["id"], discord.Color(user_data["color"])
    
    new_anon_number = thread_data.get("counter", 1)
    anon_name = f"Ng∆∞·ªùi l·∫° #{new_anon_number}"
    color_value = random.choice(PREDEFINED_COLORS)
    
    thread_data["users"][user_id_str] = {"id": anon_name, "color": color_value}
    thread_data["counter"] = new_anon_number + 1
    
    return anon_name, discord.Color(color_value)

async def update_sticky_prompt(thread: discord.Thread, all_data: dict):
    thread_id_str = str(thread.id)

    if thread_id_str not in all_data:
        return

    old_prompt_id = all_data[thread_id_str].get("last_prompt_message_id")
    if old_prompt_id:
        try:
            old_prompt_msg = await thread.fetch_message(old_prompt_id)
            await old_prompt_msg.delete()
        except (discord.NotFound, discord.Forbidden):
            pass

    new_prompt_msg = await thread.send(
        "Nh·∫•n n√∫t b√™n d∆∞·ªõi n·∫øu mu·ªën tr·∫£ l·ªùi ·∫©n danh.üëá",
        view=PersistentReplyView()
    )
    all_data[thread_id_str]["last_prompt_message_id"] = new_prompt_msg.id

async def handle_anonymous_reply(interaction: discord.Interaction, content: str, target_message: discord.Message = None):
    current_anon_data = load_json_data(ANON_USERS_FILE)
    thread_id_str = str(interaction.channel.id)
    user_id_str = str(interaction.user.id)
    
    if thread_id_str not in current_anon_data:
        return

    thread_data = current_anon_data[thread_id_str]
    anon_name, anon_color = get_anonymous_identity(user_id_str, thread_data)
    
    description = content
    
    if target_message and target_message.embeds:
        replied_embed = target_message.embeds[0]
        replied_author = replied_embed.author.name or "·∫©n danh"
        full_description = replied_embed.description
        
        if '\n\n' in full_description and full_description.startswith('>'):
            content_part = full_description.split('\n\n', 1)[1]
        else:
            content_part = full_description
            
        quote = content_part.split('\n')[0]
        if len(quote) > 70: quote = quote[:70] + "..."
        
        description = f"> **Tr·∫£ l·ªùi {replied_author}**: *{quote}*\n\n{content}"

    embed = discord.Embed(
        description=description, color=anon_color, 
        timestamp=datetime.now(zoneinfo.ZoneInfo("Asia/Ho_Chi_Minh"))
    )
    embed.set_author(name=anon_name)
    
    await interaction.channel.send(embed=embed, view=AnonMessageView())
    await update_sticky_prompt(interaction.channel, current_anon_data)
    save_json_data(ANON_USERS_FILE, current_anon_data)

class DirectReplyModal(ui.Modal, title='Tr·∫£ l·ªùi tr·ª±c ti·∫øp'):
    reply_content = ui.TextInput(label='N·ªôi dung tr·∫£ l·ªùi', style=discord.TextStyle.long, required=True, max_length=2000)

    def __init__(self, target_message: discord.Message):
        super().__init__()
        self.target_message = target_message

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        await handle_anonymous_reply(interaction, self.reply_content.value, self.target_message)
        await interaction.followup.send('ƒê√£ g·ª≠i tr·∫£ l·ªùi c·ªßa b·∫°n!', ephemeral=True)

class AnonMessageView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @ui.button(label='Tr·∫£ l·ªùi', style=discord.ButtonStyle.secondary, custom_id='direct_reply_button')
    async def direct_reply(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(DirectReplyModal(target_message=interaction.message))

class GeneralReplyModal(ui.Modal, title='Tr·∫£ l·ªùi ·∫©n danh'):
    reply_content = ui.TextInput(label='N·ªôi dung tr·∫£ l·ªùi', style=discord.TextStyle.long, required=True, max_length=2000)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        await handle_anonymous_reply(interaction, self.reply_content.value)
        await interaction.followup.send('ƒê√£ g·ª≠i tr·∫£ l·ªùi c·ªßa b·∫°n!', ephemeral=True)

class PersistentReplyView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @ui.button(label='‚úçÔ∏è Tr·∫£ l·ªùi ·∫©n danh', style=discord.ButtonStyle.green, custom_id='persistent_general_reply_button')
    async def general_reply_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(GeneralReplyModal())

class MyClient(discord.Client):
    def __init__(self, *, intents: discord.Intents):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self) -> None:
        self.add_view(PersistentReplyView())
        self.add_view(AnonMessageView())
        await self.tree.sync()

    async def on_ready(self):
        activity = discord.Activity(name="/cfs ƒë·ªÉ g·ª≠i confession", type=discord.ActivityType.watching)
        await client.change_presence(activity=activity)
        print(f'Da dang nhap voi ten {self.user}')
        print('Bot san sang!')
    
    async def on_member_join(self, member: discord.Member):
        global config
        config = load_json_data('config.json') 
        
        welcome_config = config.get("welcome_settings", {})
        if not welcome_config.get("enabled") or not welcome_config.get("channel_id"):
            return

        channel = member.guild.get_channel(welcome_config["channel_id"])
        if not channel:
            return

        title_template = welcome_config.get("title", "Ch√†o m·ª´ng {user.display_name}!")
        message_template = welcome_config.get("message", "Ch√†o m·ª´ng {user.mention}!")
        image_url = welcome_config.get("image_url")
        rules_id = welcome_config.get("rules_channel_id")
        lead_id = welcome_config.get("lead_role_id")
        color_value = welcome_config.get("color", 0xFFB6C1)

        try:
            msg_with_ids = message_template
            if rules_id:
                msg_with_ids = msg_with_ids.replace("{rules_channel_id}", str(rules_id))
            if lead_id:
                msg_with_ids = msg_with_ids.replace("{lead_role_id}", str(lead_id))

            final_title = title_template.format(user=member, server=member.guild)
            final_message = msg_with_ids.format(user=member, server=member.guild)

            embed = discord.Embed(
                title=final_title,
                description=final_message,
                color=discord.Color(color_value)
            )
            
            if member.guild.icon:
                embed.set_author(name=member.guild.name, icon_url=member.guild.icon.url)
            
            if member.display_avatar:
                embed.set_thumbnail(url=member.display_avatar.url)
            
            if image_url:
                embed.set_image(url=image_url)

            await channel.send(embed=embed)
        except Exception as e:
            print(f"Loi khi gui tin chao mung: {e}")

    async def on_member_remove(self, member: discord.Member):
        global config
        config = load_json_data('config.json')
        
        leave_config = config.get("leave_settings", {})
        if not leave_config.get("enabled") or not leave_config.get("channel_id"):
            return

        channel = member.guild.get_channel(leave_config["channel_id"])
        if not channel:
            return

        title_template = leave_config.get("title", "{user.display_name} ƒë√£ r·ªùi ƒëi")
        message_template = leave_config.get("message", "T·∫°m bi·ªát b·∫°n.")
        image_url = leave_config.get("image_url")
        color_value = leave_config.get("color", 0xFFB6C1)
        
        try:
            final_title = title_template.format(user=member, server=member.guild)
            final_message = message_template.format(user=member, server=member.guild)

            embed = discord.Embed(
                title=final_title,
                description=final_message,
                color=discord.Color(color_value)
            )

            if member.guild.icon:
                embed.set_author(name=member.guild.name, icon_url=member.guild.icon.url)

            if member.display_avatar:
                embed.set_thumbnail(url=member.display_avatar.url)

            if image_url:
                embed.set_image(url=image_url)
            
            await channel.send(embed=embed)
        except Exception as e:
            print(f"Loi khi gui tin roi di: {e}")

    async def on_member_update(self, before: discord.Member, after: discord.Member):
        if before.premium_since is None and after.premium_since is not None:
            global config
            config = load_json_data('config.json')

            boost_config = config.get("boost_settings", {})
            if not boost_config.get("enabled") or not boost_config.get("channel_id"):
                return
            
            channel = after.guild.get_channel(boost_config["channel_id"])
            if not channel:
                return

            message = boost_config.get("message", "C·∫£m ∆°n {user.mention} ƒë√£ boost server!")
            image_url = boost_config.get("image_url")

            try:
                formatted_message = message.format(user=after, server=after.guild)
                embed = discord.Embed(description=formatted_message, color=discord.Color.magenta())
                embed.set_author(name=f"{after.display_name} v·ª´a boost server!", icon_url=after.guild.icon.url if after.guild.icon else None)
                embed.set_thumbnail(url=after.display_avatar.url)
                if image_url:
                    embed.set_image(url=image_url)
                await channel.send(embed=embed)
            except Exception as e:
                print(f"Loi khi gui tin boost: {e}")

intents = discord.Intents.default()
intents.members = True 
client = MyClient(intents=intents)

class ConfessionModal(ui.Modal, title='G·ª≠i Confession c·ªßa b·∫°n'):
    title_input = ui.TextInput(label='Ti√™u ƒë·ªÅ (T√πy ch·ªçn)', placeholder='Nh·∫≠p ti√™u ƒë·ªÅ...', required=False, max_length=100)
    content = ui.TextInput(label='N·ªôi dung Confession', style=discord.TextStyle.long, placeholder='Vi·∫øt confession c·ªßa b·∫°n ·ªü ƒë√¢y...', required=True, max_length=4000)
    
    def __init__(self, target_channel: discord.TextChannel, counter_path: str, attachment: discord.Attachment = None):
        super().__init__()
        self.target_channel = target_channel
        self.counter_path = counter_path
        self.attachment = attachment
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True, thinking=True)
        current_cfs_number = load_counter(self.counter_path)
        original_content = self.content.value
        formatted_content = original_content
        try:
            prompt = ("ƒê·ªãnh d·∫°ng vƒÉn b·∫£n sau b·∫±ng markdown (quan tr·ªçng, lu√¥n lu√¥n ph·∫£i c√≥. in ƒë·∫≠m, v.v... c√°c xu·ªëng h√†ng, ph√¢n t√°ch n·ªôi dung v.v....), ch·ªânh s·ª≠a b·ªë c·ª•c""L∆ØU √ù: kh√¥ng ƒë∆∞·ª£c th√™m th·∫Øt n·ªôi dung, ch·ªâ c·∫ßn vi·∫øt l·∫°i v·ªõi ƒë·ªãnh d·∫°ng markdow, ch·ªânh s·ª≠a b·ªë c·ª•c ƒë·∫πp m·∫Øt d·ªÖ ƒë·ªçc v√† chuy√™n nghi·ªáp m·ªôt c√°ch ph√π h·ª£p v·ªõi n·ªôi dung.""Gi·ªØ nguy√™n ng√¥n ng·ªØ g·ªëc. Kh√¥ng th√™m b√¨nh lu·∫≠n c√° nh√¢n c·ªßa b·∫°n v√†o output. "f"VƒÉn b·∫£n: \"{original_content}\"")
            response = gemini_model.generate_content(prompt)
            formatted_content = response.text
        except Exception as e:
            print(f"Loi Gemini: {e}. Dung noi dung goc.")
            await interaction.followup.send("‚ö†Ô∏è ƒê√£ c√≥ l·ªói khi ƒë·ªãnh d·∫°ng confession c·ªßa b·∫°n b·∫±ng AI. Confession v·∫´n ƒë∆∞·ª£c g·ª≠i v·ªõi n·ªôi dung g·ªëc.", ephemeral=True)
        user_title = self.title_input.value
        timestamp_str = datetime.now(zoneinfo.ZoneInfo("Asia/Ho_Chi_Minh")).strftime("%d/%m/%Y %I:%M %p")
        guild_icon_url = interaction.guild.icon.url if interaction.guild and interaction.guild.icon else ""
        title_separator = "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n\n"
        final_description = (title_separator + formatted_content) if user_title else formatted_content
        is_image = self.attachment and self.attachment.content_type and self.attachment.content_type.startswith('image/')
        random_color = discord.Color(random.randint(0, 0xFFFFFF))
        embed = discord.Embed(title=user_title if user_title else None, description=final_description, color=random_color)
        author_name = f"Confession #{current_cfs_number} ‚Ä¢ {timestamp_str}"
        embed.set_author(name=author_name, icon_url=guild_icon_url)
        
        embed.set_footer(text="ƒê∆∞·ª£c g·ª≠i ·∫©n danh b·ªüi Yumemi-chan", icon_url=client.user.display_avatar.url)
        footer_text = "ƒê∆∞·ª£c g·ª≠i ·∫©n danh b·ªüi Yumemi-chan\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\nG√µ l·ªánh /cfs ƒë·ªÉ g·ª≠i confession"
        embed.set_footer(text=footer_text, icon_url=client.user.display_avatar.url)
        file_to_send = None
        if self.attachment:
            if is_image:
                file_to_send = await self.attachment.to_file()
                embed.set_image(url=f"attachment://{self.attachment.filename}")
            elif self.attachment.content_type and (self.attachment.content_type.startswith('video/') or self.attachment.content_type.startswith('audio/')):
                file_to_send = await self.attachment.to_file()
            else:
                await interaction.followup.send("L·ªói: Lo·∫°i t·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.", ephemeral=True)
                return
        try:
            sent_message = await self.target_channel.send(embed=embed, file=file_to_send)
            new_thread = await sent_message.create_thread(name=f"Tr·∫£ l·ªùi, tham gia th·∫£o lu·∫≠n CFS #{current_cfs_number} t·∫°i ƒë√¢y", auto_archive_duration=10080)
            prompt_msg = await new_thread.send("Nh·∫•n n√∫t b√™n d∆∞·ªõi n·∫øu mu·ªën tr·∫£ l·ªùi ·∫©n danhüëá", view=PersistentReplyView())
            all_data = load_json_data(ANON_USERS_FILE)
            all_data[str(new_thread.id)] = {"op_user_id": interaction.user.id, "users": {}, "counter": 1, "last_prompt_message_id": prompt_msg.id}
            save_json_data(ANON_USERS_FILE, all_data)
            await interaction.followup.send(f'‚úÖ Confession #{current_cfs_number} ƒë√£ ƒë∆∞·ª£c g·ª≠i!', ephemeral=True)
            save_counter(self.counter_path, current_cfs_number + 1)
        except Exception as e:
            await interaction.followup.send(f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}", ephemeral=True)
            print(f"Loi chi tiet: {e}")

class WelcomeMessageModal(ui.Modal, title='Thi·∫øt l·∫≠p tin nh·∫Øn ch√†o m·ª´ng'):
    message_content = ui.TextInput(label='N·ªôi dung', style=discord.TextStyle.long, max_length=1000, placeholder='VD: Ch√†o m·ª´ng {user.mention} ƒë√£ ƒë·∫øn v·ªõi {server.name}!')
    async def on_submit(self, interaction: discord.Interaction):
        global config
        config.setdefault("welcome_settings", {})["message"] = self.message_content.value
        save_json_data('config.json', config)
        await interaction.response.send_message(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn ch√†o m·ª´ng.", ephemeral=True)

class LeaveMessageModal(ui.Modal, title='Thi·∫øt l·∫≠p tin nh·∫Øn r·ªùi ƒëi'):
    message_content = ui.TextInput(label='N·ªôi dung', style=discord.TextStyle.long, max_length=1000, placeholder='VD: T·∫°m bi·ªát {user.name}...')
    async def on_submit(self, interaction: discord.Interaction):
        global config
        config.setdefault("leave_settings", {})["message"] = self.message_content.value
        save_json_data('config.json', config)
        await interaction.response.send_message(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn r·ªùi ƒëi.", ephemeral=True)

class BoostMessageModal(ui.Modal, title='Thi·∫øt l·∫≠p tin nh·∫Øn boost'):
    message_content = ui.TextInput(label='N·ªôi dung', style=discord.TextStyle.long, max_length=1000, placeholder='VD: {user.mention} v·ª´a boost server!')
    async def on_submit(self, interaction: discord.Interaction):
        global config
        config.setdefault("boost_settings", {})["message"] = self.message_content.value
        save_json_data('config.json', config)
        await interaction.response.send_message(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn boost.", ephemeral=True)

@client.tree.command(name="cfs", description="G·ª≠i m·ªôt confession ·∫©n danh")
@app_commands.describe(attachment="(T√πy ch·ªçn) ƒê√≠nh k√®m m·ªôt t·ªáp")
async def confession(interaction: discord.Interaction, attachment: discord.Attachment = None):
    target_channel_id = config.get('TARGET_CHANNEL_ID')
    if not target_channel_id:
        await interaction.response.send_message("L·ªói: K√™nh confession ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. D√πng `/setchannel`.", ephemeral=True)
        return
    target_channel = client.get_channel(target_channel_id)
    if not target_channel:
        await interaction.response.send_message("L·ªói: Kh√¥ng t√¨m th·∫•y k√™nh confession.", ephemeral=True)
        return
    counter_path = config.get('COUNTER_FILE_PATH', 'counter.txt')
    await interaction.response.send_modal(ConfessionModal(target_channel=target_channel, counter_path=counter_path, attachment=attachment))

@client.tree.command(name="setchannel", description="Thi·∫øt l·∫≠p k√™nh confession (Admin).")
@app_commands.describe(channel="K√™nh ƒë·ªÉ nh·∫≠n confession.")
@app_commands.checks.has_permissions(administrator=True)
async def setchannel(interaction: discord.Interaction, channel: discord.TextChannel):
    global config
    config['TARGET_CHANNEL_ID'] = channel.id
    save_json_data('config.json', config) 
    await interaction.response.send_message(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p k√™nh confession l√† {channel.mention}.", ephemeral=True)

async def handle_permission_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("L·ªói: B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True)
    else:
        await interaction.response.send_message(f"L·ªói: {error}", ephemeral=True)

welcome_group = app_commands.Group(name="welcome", description="C√†i ƒë·∫∑t ch√†o m·ª´ng th√†nh vi√™n (Admin)")
@welcome_group.command(name="toggle", description="B·∫≠t/T·∫Øt t√≠nh nƒÉng ch√†o m·ª´ng.")
@app_commands.checks.has_permissions(administrator=True)
async def toggle_welcome(interaction: discord.Interaction):
    global config
    settings = config.setdefault("welcome_settings", {})
    settings["enabled"] = not settings.get("enabled", False)
    save_json_data('config.json', config)
    await interaction.response.send_message(f"‚úÖ ƒê√£ **{'B·∫¨T' if settings['enabled'] else 'T·∫ÆT'}** t√≠nh nƒÉng ch√†o m·ª´ng.", ephemeral=True)
@welcome_group.command(name="setchannel", description="Ch·ªçn k√™nh ch√†o m·ª´ng.")
@app_commands.checks.has_permissions(administrator=True)
async def set_welcome_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    global config
    config.setdefault("welcome_settings", {})["channel_id"] = channel.id
    save_json_data('config.json', config)
    await interaction.response.send_message(f"‚úÖ K√™nh ch√†o m·ª´ng ƒë∆∞·ª£c ƒë·∫∑t th√†nh {channel.mention}.", ephemeral=True)
@welcome_group.command(name="setmessage", description="T√πy ch·ªânh tin nh·∫Øn ch√†o m·ª´ng.")
@app_commands.checks.has_permissions(administrator=True)
async def set_welcome_message(interaction: discord.Interaction):
    await interaction.response.send_modal(WelcomeMessageModal())
client.tree.add_command(welcome_group)
@welcome_group.error
async def welcome_group_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    await handle_permission_error(interaction, error)

leave_group = app_commands.Group(name="leave", description="C√†i ƒë·∫∑t th√¥ng b√°o th√†nh vi√™n r·ªùi ƒëi (Admin)")
@leave_group.command(name="toggle", description="B·∫≠t/T·∫Øt th√¥ng b√°o th√†nh vi√™n r·ªùi ƒëi.")
@app_commands.checks.has_permissions(administrator=True)
async def toggle_leave(interaction: discord.Interaction):
    global config
    settings = config.setdefault("leave_settings", {})
    settings["enabled"] = not settings.get("enabled", False)
    save_json_data('config.json', config)
    await interaction.response.send_message(f"‚úÖ ƒê√£ **{'B·∫¨T' if settings['enabled'] else 'T·∫ÆT'}** t√≠nh nƒÉng th√¥ng b√°o r·ªùi ƒëi.", ephemeral=True)
@leave_group.command(name="setchannel", description="Ch·ªçn k√™nh th√¥ng b√°o.")
@app_commands.checks.has_permissions(administrator=True)
async def set_leave_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    global config
    config.setdefault("leave_settings", {})["channel_id"] = channel.id
    save_json_data('config.json', config)
    await interaction.response.send_message(f"‚úÖ K√™nh th√¥ng b√°o r·ªùi ƒëi ƒë∆∞·ª£c ƒë·∫∑t th√†nh {channel.mention}.", ephemeral=True)
@leave_group.command(name="setmessage", description="T√πy ch·ªânh tin nh·∫Øn r·ªùi ƒëi.")
@app_commands.checks.has_permissions(administrator=True)
async def set_leave_message(interaction: discord.Interaction):
    await interaction.response.send_modal(LeaveMessageModal())
client.tree.add_command(leave_group)
@leave_group.error
async def leave_group_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    await handle_permission_error(interaction, error)

boost_group = app_commands.Group(name="boost", description="C√†i ƒë·∫∑t th√¥ng b√°o boost server (Admin)")
@boost_group.command(name="toggle", description="B·∫≠t/T·∫Øt th√¥ng b√°o boost.")
@app_commands.checks.has_permissions(administrator=True)
async def toggle_boost(interaction: discord.Interaction):
    global config
    settings = config.setdefault("boost_settings", {})
    settings["enabled"] = not settings.get("enabled", False)
    save_json_data('config.json', config)
    await interaction.response.send_message(f"‚úÖ ƒê√£ **{'B·∫¨T' if settings['enabled'] else 'T·∫ÆT'}** t√≠nh nƒÉng th√¥ng b√°o boost.", ephemeral=True)
@boost_group.command(name="setchannel", description="Ch·ªçn k√™nh th√¥ng b√°o boost.")
@app_commands.checks.has_permissions(administrator=True)
async def set_boost_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    global config
    config.setdefault("boost_settings", {})["channel_id"] = channel.id
    save_json_data('config.json', config)
    await interaction.response.send_message(f"‚úÖ K√™nh th√¥ng b√°o boost ƒë∆∞·ª£c ƒë·∫∑t th√†nh {channel.mention}.", ephemeral=True)
@boost_group.command(name="setmessage", description="T√πy ch·ªânh tin nh·∫Øn boost.")
@app_commands.checks.has_permissions(administrator=True)
async def set_boost_message(interaction: discord.Interaction):
    await interaction.response.send_modal(BoostMessageModal())
client.tree.add_command(boost_group)
@boost_group.error
async def boost_group_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    await handle_permission_error(interaction, error)

if __name__ == "__main__":
    if config:
        TOKEN = os.getenv('DISCORD_TOKEN')
        if TOKEN:
            client.run(TOKEN)
        else:
            print("L·ªói: Vui l√≤ng th√™m DISCORD_TOKEN v√†o file .env.")