# -*- coding: utf-8 -*-
import discord
import os
import json
from discord import app_commands, ui
from dotenv import load_dotenv
import google.generativeai as genai
from datetime import datetime
import zoneinfo

load_dotenv()

ANON_USERS_FILE = 'anonymous_users.json'

PREDEFINED_COLORS = [
    0x3498db, 0x2ecc71, 0xf1c40f, 0xe91e63, 0x9b59b6,
    0x1abc9c, 0xf39c12, 0x34495e, 0xad1457, 0x607d8b
]

def load_json_data(filepath):
    if not os.path.exists(filepath):
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

def save_json_data(filepath, data):
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

anon_users_data = load_json_data(ANON_USERS_FILE)

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    print("Loi: Vui long them GEMINI_API_KEY vao file .env.")
    exit()

genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-flash')

config = load_json_data('config.json')

def load_counter(path):
    try:
        with open(path, 'r', encoding='utf-8') as f: return int(f.read())
    except (FileNotFoundError, ValueError):
        with open(path, 'w', encoding='utf-8') as f: f.write('1')
        return 1

def save_counter(path, value):
    with open(path, 'w', encoding='utf-8') as f: f.write(str(value))


def get_anonymous_identity(user_id_str: str, thread_data: dict):
    if user_id_str == str(thread_data["op_user_id"]):
        return "Ch·ªß th·ªõt (OP)", discord.Color.gold()
    
    if user_id_str in thread_data["users"]:
        user_data = thread_data["users"][user_id_str]
        return user_data["id"], discord.Color(user_data["color"])
    
    new_anon_number = thread_data.get("counter", 1)
    anon_name = f"Ng∆∞·ªùi l·∫° #{new_anon_number}"
    color_value = PREDEFINED_COLORS[(new_anon_number - 1) % len(PREDEFINED_COLORS)]
    
    thread_data["users"][user_id_str] = {"id": anon_name, "color": color_value}
    thread_data["counter"] = new_anon_number + 1
    
    return anon_name, discord.Color(color_value)

async def update_sticky_prompt(thread: discord.Thread, all_data: dict):
    thread_id_str = str(thread.id)

    if thread_id_str not in all_data:
        return

    old_prompt_id = all_data[thread_id_str].get("last_prompt_message_id")
    if old_prompt_id:
        try:
            old_prompt_msg = await thread.fetch_message(old_prompt_id)
            await old_prompt_msg.delete()
        except (discord.NotFound, discord.Forbidden):
            pass

    new_prompt_msg = await thread.send(
        "Nh·∫•n n√∫t b√™n d∆∞·ªõi n·∫øu mu·ªën tr·∫£ l·ªùi ·∫©n danh.üëá",
        view=PersistentReplyView()
    )
    all_data[thread_id_str]["last_prompt_message_id"] = new_prompt_msg.id


class DirectReplyModal(ui.Modal, title='Tr·∫£ l·ªùi tr·ª±c ti·∫øp'):
    reply_content = ui.TextInput(label='N·ªôi dung tr·∫£ l·ªùi', style=discord.TextStyle.long, required=True, max_length=2000)

    def __init__(self, target_message: discord.Message):
        super().__init__()
        self.target_message = target_message

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)

        current_anon_data = load_json_data(ANON_USERS_FILE)
        thread_id_str = str(interaction.channel.id)
        user_id_str = str(interaction.user.id)
        
        if thread_id_str not in current_anon_data: return

        thread_data = current_anon_data[thread_id_str]
        anon_name, anon_color = get_anonymous_identity(user_id_str, thread_data)
        
        # xu ly quote
        replied_embed = self.target_message.embeds[0]
        replied_author = replied_embed.author.name or "·∫©n danh"
        full_description = replied_embed.description
        
        if '\n\n' in full_description and full_description.startswith('>'):
            content_part = full_description.split('\n\n', 1)[1]
        else:
            content_part = full_description
            
        quote = content_part.split('\n')[0]
        if len(quote) > 70: quote = quote[:70] + "..."
        
        description = f"> **Tr·∫£ l·ªùi {replied_author}**: *{quote}*\n\n{self.reply_content.value}"

        embed = discord.Embed(
            description=description, color=anon_color, 
            timestamp=datetime.now(zoneinfo.ZoneInfo("Asia/Ho_Chi_Minh"))
        )
        embed.set_author(name=anon_name)
        
        await interaction.channel.send(embed=embed, view=AnonMessageView())
        
        await update_sticky_prompt(interaction.channel, current_anon_data)

        save_json_data(ANON_USERS_FILE, current_anon_data)
        await interaction.followup.send('ƒê√£ g·ª≠i tr·∫£ l·ªùi c·ªßa b·∫°n!', ephemeral=True)

class AnonMessageView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @ui.button(label='Tr·∫£ l·ªùi', style=discord.ButtonStyle.secondary, custom_id='direct_reply_button')
    async def direct_reply(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(DirectReplyModal(target_message=interaction.message))

class GeneralReplyModal(ui.Modal, title='Tr·∫£ l·ªùi ·∫©n danh'):
    reply_content = ui.TextInput(label='N·ªôi dung tr·∫£ l·ªùi', style=discord.TextStyle.long, required=True, max_length=2000)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        current_anon_data = load_json_data(ANON_USERS_FILE)
        thread_id_str = str(interaction.channel.id)
        user_id_str = str(interaction.user.id)
        
        if thread_id_str not in current_anon_data: return

        thread_data = current_anon_data[thread_id_str]
        anon_name, anon_color = get_anonymous_identity(user_id_str, thread_data)

        embed = discord.Embed(
            description=self.reply_content.value, color=anon_color,
            timestamp=datetime.now(zoneinfo.ZoneInfo("Asia/Ho_Chi_Minh"))
        )
        embed.set_author(name=anon_name)

        await interaction.channel.send(embed=embed, view=AnonMessageView())
        
        await update_sticky_prompt(interaction.channel, current_anon_data)

        save_json_data(ANON_USERS_FILE, current_anon_data)
        await interaction.followup.send('ƒê√£ g·ª≠i tr·∫£ l·ªùi c·ªßa b·∫°n!', ephemeral=True)

class PersistentReplyView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @ui.button(label='‚úçÔ∏è Tr·∫£ l·ªùi ·∫©n danh', style=discord.ButtonStyle.green, custom_id='persistent_general_reply_button')
    async def general_reply_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(GeneralReplyModal())


class MyClient(discord.Client):
    def __init__(self, *, intents: discord.Intents):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def on_ready(self):
        self.add_view(PersistentReplyView())
        self.add_view(AnonMessageView())
        await self.tree.sync()
        activity = discord.Activity(name="/cfs ƒë·ªÉ g·ª≠i confession", type=discord.ActivityType.watching)
        await client.change_presence(activity=activity)
        print(f'Da dang nhap voi ten {self.user}')
        print('Bot san sang!')

intents = discord.Intents.default()
client = MyClient(intents=intents)

class ConfessionModal(ui.Modal, title='G·ª≠i Confession c·ªßa b·∫°n'):
    title_input = ui.TextInput(label='Ti√™u ƒë·ªÅ (T√πy ch·ªçn)', placeholder='Nh·∫≠p ti√™u ƒë·ªÅ...', required=False, max_length=100)
    content = ui.TextInput(label='N·ªôi dung Confession', style=discord.TextStyle.long, placeholder='Vi·∫øt confession c·ªßa b·∫°n ·ªü ƒë√¢y...', required=True, max_length=4000)

    def __init__(self, target_channel: discord.TextChannel, counter_path: str, attachment: discord.Attachment = None):
        super().__init__()
        self.target_channel = target_channel
        self.counter_path = counter_path
        self.attachment = attachment

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True, thinking=True)
        current_cfs_number = load_counter(self.counter_path)
        original_content = self.content.value
        formatted_content = original_content

        try:
            prompt = (
                "ƒê·ªãnh d·∫°ng vƒÉn b·∫£n sau b·∫±ng markdown"
                "L∆ØU √ù: kh√¥ng ƒë∆∞·ª£c th√™m th·∫Øt n·ªôi dung, ch·ªâ c·∫ßn vi·∫øt l·∫°i v·ªõi ƒë·ªãnh d·∫°ng markdown ƒë·∫πp m·∫Øt d·ªÖ ƒë·ªçc ph√π h·ª£p v·ªõi n·ªôi dung."
                "Gi·ªØ nguy√™n ng√¥n ng·ªØ g·ªëc. Kh√¥ng th√™m b√¨nh lu·∫≠n c√° nh√¢n c·ªßa b·∫°n v√†o output. "
                f"VƒÉn b·∫£n: \"{original_content}\""
            )
            response = gemini_model.generate_content(prompt)
            formatted_content = response.text
        except Exception as e:
            print(f"Loi Gemini: {e}. Dung noi dung goc.")
            await interaction.followup.send(
                "‚ö†Ô∏è ƒê√£ c√≥ l·ªói khi ƒë·ªãnh d·∫°ng confession c·ªßa b·∫°n b·∫±ng AI. "
                "Confession v·∫´n ƒë∆∞·ª£c g·ª≠i v·ªõi n·ªôi dung g·ªëc.", 
                ephemeral=True
            )

        user_title = self.title_input.value
        timestamp_str = datetime.now(zoneinfo.ZoneInfo("Asia/Ho_Chi_Minh")).strftime("%d/%m/%Y %I:%M %p")
        guild_icon_url = interaction.guild.icon.url if interaction.guild and interaction.guild.icon else ""
        separator = "\n\n- - - - - - - - - - - - - - - - - - - - - - -\n"
        final_description = formatted_content
        is_image = self.attachment and self.attachment.content_type and self.attachment.content_type.startswith('image/')
        if user_title: final_description = separator + final_description
        if is_image: final_description = final_description + separator

        embed = discord.Embed(title=user_title if user_title else None, description=final_description, color=discord.Color.from_rgb(255, 182, 193))
        author_name = f"Confession #{current_cfs_number} ‚Ä¢ {timestamp_str}"
        embed.set_author(name=author_name, icon_url=guild_icon_url)
        footer_text = "Nh·∫•n n√∫t 'Tr·∫£ l·ªùi ·∫©n danh' b√™n d∆∞·ªõi ƒë·ªÉ tham gia th·∫£o lu·∫≠n!"
        bot_avatar_url = client.user.display_avatar.url
        embed.set_footer(text=footer_text, icon_url=bot_avatar_url)
        
        file_to_send = None
        if self.attachment:
            if is_image:
                file_to_send = await self.attachment.to_file()
                embed.set_image(url=f"attachment://{self.attachment.filename}")
            elif self.attachment.content_type and (self.attachment.content_type.startswith('video/') or self.attachment.content_type.startswith('audio/')):
                file_to_send = await self.attachment.to_file()
            else:
                await interaction.followup.send("L·ªói: Lo·∫°i t·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.", ephemeral=True)
                return

        try:
            sent_message = await self.target_channel.send(embed=embed, file=file_to_send)
            new_thread = await sent_message.create_thread(name=f"Th·∫£o lu·∫≠n CFS #{current_cfs_number}", auto_archive_duration=10080)
            
            prompt_msg = await new_thread.send(
                "Ch√†o m·ª´ng ƒë·∫øn v·ªõi bu·ªïi th·∫£o lu·∫≠n ·∫©n danh! Nh·∫•n n√∫t b√™n d∆∞·ªõi ho·∫∑c tr·∫£ l·ªùi tr·ª±c ti·∫øp m·ªôt tin nh·∫Øn. üëá", 
                view=PersistentReplyView()
            )

            all_data = load_json_data(ANON_USERS_FILE)
            all_data[str(new_thread.id)] = {
                "op_user_id": interaction.user.id,
                "users": {},
                "counter": 1,
                "last_prompt_message_id": prompt_msg.id
            }
            save_json_data(ANON_USERS_FILE, all_data)
            
            await interaction.followup.send(f'‚úÖ Confession #{current_cfs_number} ƒë√£ ƒë∆∞·ª£c g·ª≠i!', ephemeral=True)
            save_counter(self.counter_path, current_cfs_number + 1)
        except Exception as e:
            await interaction.followup.send(f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}", ephemeral=True)
            print(f"Loi chi tiet: {e}")

@client.tree.command(name="cfs", description="G·ª≠i m·ªôt confession ·∫©n danh v√†o k√™nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh")
@app_commands.describe(attachment="(T√πy ch·ªçn) ƒê√≠nh k√®m m·ªôt t·ªáp (·∫£nh, video, audio)")
async def confession(interaction: discord.Interaction, attachment: discord.Attachment = None):
    target_channel_id = int(os.getenv('TARGET_CHANNEL_ID'))
    target_channel = client.get_channel(target_channel_id)
    if not target_channel:
        await interaction.response.send_message("L·ªói: Kh√¥ng t√¨m th·∫•y k√™nh confession.", ephemeral=True)
        return
    modal = ConfessionModal(target_channel=target_channel, counter_path=config['COUNTER_FILE_PATH'], attachment=attachment)
    await interaction.response.send_modal(modal)

if __name__ == "__main__":
    if config:
        TOKEN = os.getenv('DISCORD_TOKEN')
        if TOKEN:
            client.run(TOKEN)
        else:
            print("L·ªói: Vui l√≤ng th√™m DISCORD_TOKEN v√†o file .env.")